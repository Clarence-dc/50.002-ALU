/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_9 (
    input clk,
    input rst,
    input [4:0] button,
    output reg [89:0] seg18,
    output reg [143:0] arr,
    output reg [19:0] io_seg
  );
  
  
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_slowclkedge_out;
  reg [1-1:0] M_slowclkedge_in;
  edge_detector_14 slowclkedge (
    .clk(clk),
    .in(M_slowclkedge_in),
    .out(M_slowclkedge_out)
  );
  wire [1-1:0] M_slowclk_value;
  counter_13 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  
  wire [144-1:0] M_control_arr;
  wire [20-1:0] M_control_io_seg;
  reg [5-1:0] M_control_button;
  controlunit_21 control (
    .clk(clk),
    .button(M_control_button),
    .arr(M_control_arr),
    .io_seg(M_control_io_seg)
  );
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_2 buttondetector (
      .clk(M_slowclkedge_out),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg [3:0] r91;
  reg [3:0] r90;
  reg [3:0] r81;
  reg [3:0] r80;
  reg [3:0] r71;
  reg [3:0] r70;
  reg [3:0] r61;
  reg [3:0] r60;
  reg [3:0] r51;
  reg [3:0] r50;
  reg [3:0] r41;
  reg [3:0] r40;
  reg [3:0] r31;
  reg [3:0] r30;
  reg [3:0] r21;
  reg [3:0] r20;
  reg [3:0] r11;
  reg [3:0] r10;
  
  always @* begin
    M_slowclkedge_in = M_slowclk_value;
    M_buttoncond_in = button;
    M_buttoncond_in = button[0+4-:5];
    M_buttondetector_in = M_buttoncond_out;
    M_control_button = M_buttondetector_out;
    arr = M_control_arr;
    io_seg = M_control_io_seg;
    r91 = M_control_arr[128+15-:16] / 4'ha;
    r90 = M_control_arr[128+15-:16] - r91 * 4'ha;
    r81 = M_control_arr[112+15-:16] / 4'ha;
    r80 = M_control_arr[112+15-:16] - r81 * 4'ha;
    r71 = M_control_arr[96+15-:16] / 4'ha;
    r70 = M_control_arr[96+15-:16] - r71 * 4'ha;
    r61 = M_control_arr[80+15-:16] / 4'ha;
    r60 = M_control_arr[80+15-:16] - r61 * 4'ha;
    r51 = M_control_arr[64+15-:16] / 4'ha;
    r50 = M_control_arr[64+15-:16] - r51 * 4'ha;
    r41 = M_control_arr[48+15-:16] / 4'ha;
    r40 = M_control_arr[48+15-:16] - r41 * 4'ha;
    r31 = M_control_arr[32+15-:16] / 4'ha;
    r30 = M_control_arr[32+15-:16] - r31 * 4'ha;
    r21 = M_control_arr[16+15-:16] / 4'ha;
    r20 = M_control_arr[16+15-:16] - r21 * 4'ha;
    r11 = M_control_arr[0+15-:16] / 4'ha;
    r10 = M_control_arr[0+15-:16] - r11 * 4'ha;
    seg18 = 90'h3bde737bd6b39c62f7b5ab5;
  end
endmodule
