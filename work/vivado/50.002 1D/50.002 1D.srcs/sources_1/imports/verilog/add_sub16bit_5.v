/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module add_sub16bit_5 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] s,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] m
  );
  
  
  
  wire [(5'h10+0)-1:0] M_adder_s;
  wire [(5'h10+0)-1:0] M_adder_cout;
  reg [(5'h10+0)-1:0] M_adder_x;
  reg [(5'h10+0)-1:0] M_adder_y;
  reg [(5'h10+0)-1:0] M_adder_cin;
  
  genvar GEN_adder0;
  generate
  for (GEN_adder0=0;GEN_adder0<5'h10;GEN_adder0=GEN_adder0+1) begin: adder_gen_0
    adder1b_13 adder (
      .x(M_adder_x[GEN_adder0*(1)+(1)-1-:(1)]),
      .y(M_adder_y[GEN_adder0*(1)+(1)-1-:(1)]),
      .cin(M_adder_cin[GEN_adder0*(1)+(1)-1-:(1)]),
      .s(M_adder_s[GEN_adder0*(1)+(1)-1-:(1)]),
      .cout(M_adder_cout[GEN_adder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    m = 1'h0;
    M_adder_x = a;
    M_adder_y = 16'h0000;
    
    case (alufn[0+1-:2])
      2'h0: begin
        M_adder_y = b;
      end
      2'h1: begin
        M_adder_y = {5'h10{alufn[0+0-:1]}} ^ b;
      end
      2'h2: begin
        m = a * b;
      end
      2'h3: begin
        m = a / b;
      end
    endcase
    M_adder_cin[1+14-:15] = M_adder_cout[0+14-:15];
    M_adder_cin[0+0-:1] = alufn[0+0-:1];
    z = ~((|M_adder_s));
    v = (a[15+0-:1] & (b[15+0-:1] ^ alufn[0+0-:1]) & ~M_adder_s[15+0-:1]) | (~a[15+0-:1] & ~(b[15+0-:1] ^ alufn[0+0-:1]) & M_adder_s[15+0-:1]);
    n = M_adder_s[15+0-:1];
    s = M_adder_s;
  end
endmodule
