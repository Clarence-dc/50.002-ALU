/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  reg [5:0] alufn;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_2 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  reg [15:0] M_a_mem_d, M_a_mem_q = 1'h0;
  reg [15:0] M_b_mem_d, M_b_mem_q = 1'h0;
  wire [16-1:0] M_auto_out;
  wire [20-1:0] M_auto_seg;
  wire [24-1:0] M_auto_io_led;
  autotester_4 auto (
    .clk(clk),
    .rst(rst),
    .out(M_auto_out),
    .seg(M_auto_seg),
    .io_led(M_auto_io_led)
  );
  localparam S0_input_controller = 2'd0;
  localparam S1_input_controller = 2'd1;
  localparam S2_input_controller = 2'd2;
  
  reg [1:0] M_input_controller_d, M_input_controller_q = S0_input_controller;
  localparam S0_mode_controller = 1'd0;
  localparam S1_mode_controller = 1'd1;
  
  reg M_mode_controller_d, M_mode_controller_q = S0_mode_controller;
  wire [8-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [20-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [16-1:0] M_alu_out;
  wire [20-1:0] M_alu_seg;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_6 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .seg(M_alu_seg)
  );
  
  always @* begin
    M_input_controller_d = M_input_controller_q;
    M_mode_controller_d = M_mode_controller_q;
    M_a_mem_d = M_a_mem_q;
    M_b_mem_d = M_b_mem_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 20'h84210;
    M_buttoncond_in = io_button[0+4-:5];
    M_buttondetector_in = M_buttoncond_out;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    
    case (M_mode_controller_q)
      S0_mode_controller: begin
        alufn = io_dip[16+0+5-:6];
        M_alu_alufn = alufn;
        io_led[16+0+5-:6] = io_dip[16+0+5-:6];
        
        case (M_input_controller_q)
          S0_input_controller: begin
            M_seg_values = 20'h04210;
            io_led[16+7+0-:1] = 8'h01;
            io_led[16+6+0-:1] = 8'h00;
            M_a_mem_d[8+7-:8] = io_dip[8+7-:8];
            M_a_mem_d[0+7-:8] = io_dip[0+7-:8];
            io_led[8+7-:8] = io_dip[8+7-:8];
            io_led[0+7-:8] = io_dip[0+7-:8];
            if (M_buttondetector_out[4+0-:1]) begin
              M_input_controller_d = S1_input_controller;
            end else begin
              if (M_buttondetector_out[3+0-:1]) begin
                M_input_controller_d = S2_input_controller;
              end
            end
          end
          S1_input_controller: begin
            M_seg_values = 20'h0c210;
            io_led[16+7+0-:1] = 8'h00;
            io_led[16+6+0-:1] = 8'h01;
            M_b_mem_d[8+7-:8] = io_dip[8+7-:8];
            M_b_mem_d[0+7-:8] = io_dip[0+7-:8];
            io_led[8+7-:8] = io_dip[8+7-:8];
            io_led[0+7-:8] = io_dip[0+7-:8];
            if (M_buttondetector_out[4+0-:1]) begin
              M_input_controller_d = S2_input_controller;
            end else begin
              if (M_buttondetector_out[3+0-:1]) begin
                M_input_controller_d = S0_input_controller;
              end
            end
          end
          S2_input_controller: begin
            io_led[16+7+0-:1] = 8'h01;
            io_led[16+6+0-:1] = 8'h01;
            M_alu_a = M_a_mem_q;
            M_alu_b = M_b_mem_q;
            io_led[8+7-:8] = M_alu_out[8+7-:8];
            io_led[0+7-:8] = M_alu_out[0+7-:8];
            M_seg_values = M_alu_seg;
            if (M_buttondetector_out[4+0-:1]) begin
              M_input_controller_d = S0_input_controller;
            end else begin
              if (M_buttondetector_out[3+0-:1]) begin
                M_input_controller_d = S1_input_controller;
              end
            end
          end
        endcase
        if (M_buttondetector_out[1+0-:1]) begin
          M_mode_controller_d = S1_mode_controller;
        end
      end
      S1_mode_controller: begin
        if (M_buttondetector_out[1+0-:1]) begin
          M_mode_controller_d = S0_mode_controller;
        end
        io_led[8+7-:8] = M_auto_out[8+7-:8];
        io_led[0+7-:8] = M_auto_out[0+7-:8];
        M_seg_values = M_auto_seg;
        io_led = M_auto_io_led;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_a_mem_q <= M_a_mem_d;
    M_b_mem_q <= M_b_mem_d;
    
    if (rst == 1'b1) begin
      M_input_controller_q <= 1'h0;
      M_mode_controller_q <= 1'h0;
    end else begin
      M_input_controller_q <= M_input_controller_d;
      M_mode_controller_q <= M_mode_controller_d;
    end
  end
  
endmodule
