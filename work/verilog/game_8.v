/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_8 (
    input clk,
    input rst,
    input [4:0] button,
    output reg [89:0] seg,
    output reg [19:0] io_seg
  );
  
  
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [16-1:0] M_reg_read_data_1;
  wire [16-1:0] M_reg_read_data_2;
  reg [5-1:0] M_reg_read_address_1;
  reg [5-1:0] M_reg_read_address_2;
  reg [5-1:0] M_reg_write_address;
  reg [16-1:0] M_reg_write_data;
  reg [1-1:0] M_reg_write_enable;
  regfile_18 L_reg (
    .clk(clk),
    .read_address_1(M_reg_read_address_1),
    .read_address_2(M_reg_read_address_2),
    .write_address(M_reg_write_address),
    .write_data(M_reg_write_data),
    .write_enable(M_reg_write_enable),
    .read_data_1(M_reg_read_data_1),
    .read_data_2(M_reg_read_data_2)
  );
  wire [3-1:0] M_ctrl_pcsel;
  wire [1-1:0] M_ctrl_wasel;
  wire [1-1:0] M_ctrl_asel;
  wire [1-1:0] M_ctrl_ra2sel;
  wire [1-1:0] M_ctrl_bsel;
  wire [6-1:0] M_ctrl_alufn;
  wire [2-1:0] M_ctrl_wdsel;
  wire [1-1:0] M_ctrl_werf;
  wire [1-1:0] M_ctrl_moe;
  wire [1-1:0] M_ctrl_xwr;
  reg [1-1:0] M_ctrl_irq;
  reg [1-1:0] M_ctrl_z;
  reg [1-1:0] M_ctrl_reset;
  reg [6-1:0] M_ctrl_opcode;
  controlunit_19 ctrl (
    .clk(clk),
    .irq(M_ctrl_irq),
    .z(M_ctrl_z),
    .reset(M_ctrl_reset),
    .opcode(M_ctrl_opcode),
    .pcsel(M_ctrl_pcsel),
    .wasel(M_ctrl_wasel),
    .asel(M_ctrl_asel),
    .ra2sel(M_ctrl_ra2sel),
    .bsel(M_ctrl_bsel),
    .alufn(M_ctrl_alufn),
    .wdsel(M_ctrl_wdsel),
    .werf(M_ctrl_werf),
    .moe(M_ctrl_moe),
    .xwr(M_ctrl_xwr)
  );
  wire [1-1:0] M_slowclkedge_out;
  reg [1-1:0] M_slowclkedge_in;
  edge_detector_13 slowclkedge (
    .clk(clk),
    .in(M_slowclkedge_in),
    .out(M_slowclkedge_out)
  );
  localparam IDLE_game_controller = 4'd0;
  localparam START_game_controller = 4'd1;
  localparam ERROR_game_controller = 4'd2;
  localparam MERGE_game_controller = 4'd3;
  localparam ADD_NUM_game_controller = 4'd4;
  localparam CHECK_WIN_game_controller = 4'd5;
  localparam CHECK_LOSE_game_controller = 4'd6;
  localparam LOSE_game_controller = 4'd7;
  localparam WIN_game_controller = 4'd8;
  localparam GAMEOVER_game_controller = 4'd9;
  
  reg [3:0] M_game_controller_d, M_game_controller_q = IDLE_game_controller;
  wire [1-1:0] M_slowclk_value;
  counter_12 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_2 buttondetector (
      .clk(M_slowclkedge_out),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  wire [20-1:0] M_alu_seg;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_11 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .zvn(M_alu_zvn),
    .seg(M_alu_seg)
  );
  
  always @* begin
    M_slowclkedge_in = M_slowclk_value;
    M_buttoncond_in = button;
    seg = 90'h21084210842108421084210;
    io_seg = 20'h84210;
    M_buttoncond_in = button[0+4-:5];
    M_buttondetector_in = M_buttoncond_out;
    M_ctrl_opcode = 6'h00;
    M_ctrl_z = 1'h0;
    M_ctrl_irq = 1'h0;
    M_ctrl_reset = 1'h0;
    M_reg_read_address_1 = 1'h0;
    M_reg_read_address_2 = 1'h0;
    M_reg_write_address = 1'h0;
    M_reg_write_data = 1'h0;
    M_reg_write_enable = M_ctrl_werf;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = M_ctrl_alufn;
    
    case (M_game_controller_q)
      IDLE_game_controller: begin
        seg = 90'h21084210842108421084210;
        if ((^M_buttondetector_out)) begin
          M_reg_write_address = 16'h000b;
          if (M_buttondetector_out[0+0-:1]) begin
            M_reg_write_data = 16'h0006;
          end else begin
            if (M_buttondetector_out[2+0-:1]) begin
              M_reg_write_data = 16'h0007;
            end else begin
              if (M_buttondetector_out[3+0-:1]) begin
                M_reg_write_data = 16'h0004;
              end else begin
                if (M_buttondetector_out[4+0-:1]) begin
                  M_reg_write_data = 16'h0005;
                end
              end
            end
          end
        end
      end
    endcase
    
    case (M_ctrl_asel)
      2'h0: begin
        M_alu_a = M_reg_read_data_1;
      end
      2'h1: begin
        M_alu_a = 16'h0002;
      end
      2'h2: begin
        M_alu_a = 16'h0003;
      end
      2'h3: begin
        M_alu_a = 16'hffff;
      end
    endcase
    
    case (M_ctrl_bsel)
      2'h0: begin
        M_alu_b = M_reg_read_data_2;
      end
      2'h1: begin
        M_alu_b = 16'h0000;
      end
      2'h2: begin
        M_alu_b = 16'h0001;
      end
      2'h3: begin
        M_alu_b = 16'h0040;
      end
    endcase
    
    case (M_ctrl_wdsel)
      2'h0: begin
        M_reg_write_data = M_alu_out;
      end
      2'h1: begin
        M_reg_write_data = 16'h0000;
      end
      2'h2: begin
        M_reg_write_data = 16'h000f;
      end
      2'h3: begin
        M_reg_write_data = 16'hffff;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_controller_q <= 1'h0;
    end else begin
      M_game_controller_q <= M_game_controller_d;
    end
  end
  
endmodule
