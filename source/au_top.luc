module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output r[18],
    output sevenseg[8],     // 7-segment LEDs on game
    input gamebutton[5]    // 5 buttons on Game
  )  {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    multi_seven_seg seg;
    eighteen_seven_seg seg18;
    game game;
    }
  }
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // initialise
    sevenseg = seg18.seg;
    r = ~seg18.sel;
    seg18.values = 9x{{16,16}};
    seg.values = {16,16,16,16};
    io_seg = ~seg.seg;   // connect segments to counter
    io_sel = ~seg.sel; // connect digit select to counter
    game.button = gamebutton;
    seg.values = game.io_seg;
    seg18.values = game.seg18;
  }
}
