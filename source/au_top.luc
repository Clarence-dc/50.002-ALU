module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  )  {
  
  sig rst,alufn[6];                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector buttondetector[5](#RISE(1), #FALL(0)); //detect on rising edge only
    button_conditioner buttoncond[5];
    dff a_mem[16](#INIT(0));
    dff b_mem[16](#INIT(0));
    .rst(rst){
    autotester auto;
    fsm input_controller = {S0, S1,S2};
    fsm mode_controller = {S0,S1};
    multi_seven_seg seg;
    }
  }
  // slow the clock so that the fsm will not function too quickly
  
  alu alu;
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // initialise
    
    seg.values = {16,16,16,16};
    buttoncond.in = io_button[4:0];
    buttondetector.in = buttoncond.out;
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;
    io_seg = ~seg.seg;   // connect segments to counter
    io_sel = ~seg.sel; // connect digit select to counter
    case (mode_controller.q){
      mode_controller.S0:// manual
      alufn = io_dip[2][5:0];
      alu.alufn = alufn;
      io_led[2][5:0]  = io_dip[2][5:0];
      case (input_controller.q){
        input_controller.S0:
        seg.values = {b00000,16,16,16};
        io_led [2][7] = h01;
        io_led [2][6] = h00;
        a_mem.d[15:8] = io_dip[1];
        a_mem.d[7:0] = io_dip[0];
        io_led[1] = io_dip[1];
        io_led[0] = io_dip[0];
        if (buttondetector.out[4]){
          input_controller.d = input_controller.S1;
        }else if(buttondetector.out[3]){
          input_controller.d = input_controller.S2;
        }
        input_controller.S1:
        seg.values = {b00001,16,16,16};
        io_led [2][7] = h00;
        io_led [2][6] = h01;
        b_mem.d[15:8] = io_dip[1];
        b_mem.d[7:0] = io_dip[0];
        io_led[1] = io_dip[1];
        io_led[0] = io_dip[0];
        if (buttondetector.out[4]){
          input_controller.d = input_controller.S2;
        }else if(buttondetector.out[3]){
          input_controller.d = input_controller.S0;
        } 
        input_controller.S2:
        io_led [2][7] = h01;
        io_led [2][6] = h01;
        alu.a = a_mem.q;
        alu.b = b_mem.q;
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        seg.values = alu.seg;
        if (buttondetector.out[4]){
          input_controller.d = input_controller.S0;
        }else if(buttondetector.out[3]){
          input_controller.d = input_controller.S1;
        }
      }
      if (buttondetector.out[1]){
          mode_controller.d = mode_controller.S1;
        }
      mode_controller.S1:// auto 
      if (buttondetector.out[1]){
        mode_controller.d = mode_controller.S0;
      }
      io_led[1] = auto.out[15:8];
      io_led[0] = auto.out[7:0];
      seg.values = auto.seg;
      io_led = auto.io_led;
    }
  }
}
