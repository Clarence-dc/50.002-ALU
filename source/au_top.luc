
module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  )  {
  
  sig rst,alufn[6];                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector buttondetector[5](#RISE(1), #FALL(0)); //detect on rising edge only
    button_conditioner buttoncond[5];
    dff a_mem[16](#INIT(0));
    dff b_mem[16](#INIT(0));
    .rst(rst){
    fsm input_controller = {S0, S1,S2};
    multi_seven_seg seg;
    }
  }
  
  
  add_sub16bit adder;
  boolean bool;
  shifter shift;
  comparator comp;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // initialise
    seg.values = {17,17,17,17};
    buttoncond.in = io_button[4:0];
    buttondetector.in = buttoncond.out;
    alufn = io_dip[2][5:0];
    adder.a = 0;
    adder.b = 0;
    adder.alufn = alufn;
    bool.a = 0;
    bool.b = 0;
    bool.alufn = alufn;
    shift.a = 0;
    shift.b = 0;
    shift.alufn = alufn;
    comp.z = 0;
    comp.v = 0;
    comp.n = 0;
    comp.alufn = alufn;
    io_led[2][5:0]  = io_dip[2][5:0];
    io_seg = ~seg.seg;   // connect segments to counter
    io_sel = ~seg.sel; // connect digit select to counter
    case (input_controller.q){
      input_controller.S0:
      seg.values = {b00000,17,17,17};
      io_led [2][7] = h01;
      io_led [2][6] = h00;
      a_mem.d[15:8] = io_dip[1];
      a_mem.d[7:0] = io_dip[0];
      io_led[1] = io_dip[1];
      io_led[0] = io_dip[0];
      if (buttondetector.out[4]){
        input_controller.d = input_controller.S1;
      }else{
        input_controller.d = input_controller.S0;
      }
      input_controller.S1:
      seg.values = {b00001,17,17,17};
      io_led [2][7] = h00;
      io_led [2][6] = h01;
      b_mem.d[15:8] = io_dip[1];
      b_mem.d[7:0] = io_dip[0];
      io_led[1] = io_dip[1];
      io_led[0] = io_dip[0];
      if (buttondetector.out[4]){
        input_controller.d = input_controller.S2;
      }else{
        input_controller.d = input_controller.S1;
      }  
      input_controller.S2:
      io_led [2][7] = h01;
      io_led [2][6] = h01;
      case(alufn[5:4]){
          b00: //add sub mult div
          adder.a = a_mem.q;
          adder.b = b_mem.q;
          case(alufn[1:0]){
              b00:// add
                seg.values = {b00010,17,b00011,b00000}; // o _ A. A
                io_led[1] = adder.s[15:8];
                io_led[0] = adder.s[7:0];
              b01:// subtract
                seg.values = {b00010,17,b00011,b00100}; // o _ A. S
                io_led[1] = adder.s[15:8];
                io_led[0] = adder.s[7:0];  
              b10:// multiply
                seg.values = {b00010,17,b00011,b00101}; // o _ A. X
                io_led[1] = adder.m[15:8];
                io_led[0] = adder.m[7:0];
              b11:// divide
                seg.values = {b00010,17,b00011,b00110}; // o _ A. d
                io_led[1] = adder.m[15:8];
                io_led[0] = adder.m[7:0];
            }
          b01:// boolean
          bool.a = a_mem.q;
          bool.b = b_mem.q;
          seg.values = {b00010,17,b00111,17}; // o _ b. _
          case (alufn[3:0]){
              b1000: // AND
              seg.values = {b00010,17,b00111,b01000}; // o _ b. n      
              b1110: // OR
              seg.values = {b00010,17,b00111,b00010}; // o _ b. o       
              b0110: // XOR
              seg.values = {b00010,17,b00111,b00101}; // o _ b. X  
              b1010: // "A"/LDR
              seg.values = {b00010,17,b00111,b01001}; // o _ b. L 
            }
          io_led[1] = bool.boole[15:8];
          io_led[0] = bool.boole[7:0];
          b10:// shifter
          shift.a = a_mem.q;
          shift.b = b_mem.q;
          seg.values = {b00010,17,b01010,17}; // o _ S. _
          case (alufn[1:0]){
            b00: // Shift left SHL
            seg.values = {b00010,17,b01010,b01001}; // o _ S. L
            b01: // Shift right SHR
            seg.values = {b00010,17,b01010,b01011}; // o _ S. r
            b11: // Signed shift right SRA
            seg.values = {b00010,17,b01010,b01100}; // o _ S. r.
            }
          io_led[1] = shift.out[15:8];
          io_led[0] = shift.out[7:0];
          b11:// comparator
          adder.a = a_mem.q;
          adder.b = b_mem.q;
          comp.z = adder.z;
          comp.v = adder.v;
          comp.n = adder.n;  
          seg.values = {b00010,17,b01101,17}; // o _ C. _
          case (alufn[2:1]){
            b01:// A = B
            seg.values = {b00010,17,b01101,b01110}; // o _ C. E
            b10:// A < B
            seg.values = {b00010,17,b01101,b01001}; // o _ C. L
            b11:// A <= B
            seg.values = {b00010,17,b01101,b01111}; // o _ C. L.
            }
          io_led[1] = 0;
          io_led[0][7:1] = 0;
          io_led[0][0] = comp.cmp;
        }
        
      if (buttondetector.out[4]){
        input_controller.d = input_controller.S0;
      }else{
        input_controller.d = input_controller.S2;
      }  	
    }
    
  }
}
