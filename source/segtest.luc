module segtest (
    input clk,  // clock
    input rst,  // reset
    input button[5],
    output seg[4][5]
  ) {
  counter slowclk(#SIZE(1),#DIV(27), .clk(clk), .rst(rst));
  edge_detector slowclkedge(.clk(clk));
  edge_detector buttondetector[5](.clk(slowclkedge.out), #RISE(1), #FALL(0)); //detect on rising edge only
  button_conditioner buttoncond[5](.clk(clk));
  fsm auto_controller(.clk(slowclkedge.out)) = {IDLE,S0,S1,S2,S3,S4,S5,S6};
  always {
    slowclkedge.in = slowclk.value;    // use edge detector to slow clock
    buttoncond.in = button;
    buttondetector.in = buttoncond.out;
    seg = {16,16,16,16};
    case(auto_controller.q){
          auto_controller.IDLE:
          seg = {21,b00110,b01001,b01110};
          auto_controller.S0:
          seg = {b00000,b00001,b00010,b00011};
          auto_controller.d = auto_controller.S1;
          auto_controller.S1:
          seg = {b00100,b00101,b00110,b00111};
          auto_controller.d = auto_controller.S2;
          auto_controller.S2:
          seg = {b01000,b01001,b01010,b01011};
          auto_controller.d = auto_controller.S3;
          auto_controller.S3:
          seg = {b01100,b01101,b01110,b01111};
          auto_controller.d = auto_controller.S4;
          auto_controller.S4:
          seg = {16,17,20,21};
          auto_controller.d = auto_controller.S5;
          auto_controller.S5:
          seg = {22,23,24,25};
          auto_controller.d = auto_controller.S6;
          auto_controller.S6:
          seg = {26,27,28,29};
          auto_controller.d = auto_controller.S0;
    }
    if (buttondetector.out[1]){
      if(auto_controller.q!=auto_controller.IDLE){
        auto_controller.d = auto_controller.IDLE; //reset
      }else{
        auto_controller.d = auto_controller.S0; //start
      }
    }
  }
}
  