module game (
    input clk,  // clock
    input rst,  // reset
    input button[5],
    output seg[9][2][5],
    output io_seg[4][5]
  ) {
                  // reset signal
    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    button_conditioner buttoncond[5];
    regfile reg;
    controlunit ctrl;
    
    
    edge_detector slowclkedge;
    
    .rst(rst){
    fsm game_controller = {IDLE,START,ERROR,MERGE,ADD_NUM,CHECK_WIN,CHECK_LOSE,LOSE,WIN,GAMEOVER};
    counter slowclk(#SIZE(1),#DIV(24));
    }
  }
    edge_detector buttondetector[5](.clk(slowclkedge.out), #RISE(1), #FALL(0)); //detect on rising edge only
    alu alu;
    
  always {
    // initialise all inputs
    slowclkedge.in = slowclk.value;
    buttoncond.in = button;
    seg = 9x{{2x{{16}}}};
    io_seg = 4x{{16}};
    buttoncond.in = button[4:0];
    buttondetector.in = buttoncond.out;
    ctrl.opcode = 6b0;
    ctrl.z = 0;
    ctrl.irq = 0;
    ctrl.reset = 0;
    reg.read_address_1 = 0;
    reg.read_address_2 = 0;
    reg.write_address = 0;
    reg.write_data = 0;
    reg.write_enable = ctrl.werf;
    alu.a = 0;
    alu.b = 0;
    alu.alufn = ctrl.alufn;
    
    case(game_controller.q){
      game_controller.IDLE:
        seg = 9x{{2x{{16}}}};
        if (^buttondetector.out){
          reg.write_address = 16d11;
          if (buttondetector.out[0]){
            reg.write_data = 16b110;
          } else if (buttondetector.out[2]){
            reg.write_data = 16b111;
          } else if (buttondetector.out[3]){
            reg.write_data = 16b100;
          } else if (buttondetector.out[4]){
            reg.write_data = 16b101;
          } 
        }
          
    }
    //asel
    case(ctrl.asel){
      b00:
        alu.a = reg.read_data_1;
      b01:
        alu.a = 16b10;
      b10:
        alu.a = 16b11;
      b11:
        alu.a = 16hffff;
      }
    case(ctrl.bsel){
      b00:
        alu.b = reg.read_data_2;
      b01:
        alu.b = 16b00;
      b10:
        alu.b = 16b01;
      b11:
        alu.b = 16d64;
      }
    case(ctrl.wdsel){
      b00:
        reg.write_data = alu.out;
      b01:
        reg.write_data = 16b0;
      b10:
        reg.write_data = 16h000F;
      b11:
        reg.write_data = 16hFFFF;
      }
    
    
  }
}
