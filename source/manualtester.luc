module manualtester (
    input clk,  // clock
    input rst,  // reset
    input button[5],
    input io_dip [3][8],
    output seg[4][5],
    output io_led[3][8]
  ) {
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    dff a_mem[16](#INIT(0));
    dff b_mem[16](#INIT(0));
    .rst(rst){
    fsm input_controller = {S0, S1,S2};
    }
  }
  alu alu;
  always {
  alu.a = 0;
  alu.b = 0;
  alu.alufn = io_dip[2][5:0];
  io_led = 3x{{8h00}};    // turn LEDs off
  seg = {16,16,16,16};
    case (input_controller.q){
        input_controller.S0:
        seg = {b00000,16,16,16};
        io_led [2][7] = h01;
        io_led [2][6] = h00;
        a_mem.d[15:8] = io_dip[1];
        a_mem.d[7:0] = io_dip[0];
        io_led[1] = io_dip[1];
        io_led[0] = io_dip[0];
        if (button[4]){
          input_controller.d = input_controller.S1;
        }else if(button[3]){
          input_controller.d = input_controller.S2;
        }
        input_controller.S1:
        seg = {b00001,16,16,16};
        io_led [2][7] = h00;
        io_led [2][6] = h01;
        b_mem.d[15:8] = io_dip[1];
        b_mem.d[7:0] = io_dip[0];
        io_led[1] = io_dip[1];
        io_led[0] = io_dip[0];
        if (button[4]){
          input_controller.d = input_controller.S2;
        }else if(button[3]){
          input_controller.d = input_controller.S0;
        } 
        input_controller.S2:
        io_led [2][7] = h01;
        io_led [2][6] = h01;
        alu.a = a_mem.q;
        alu.b = b_mem.q;
        io_led[1] = alu.out[15:8];
        io_led[0] = alu.out[7:0];
        seg = alu.seg;
        if (button[4]){
          input_controller.d = input_controller.S0;
        }else if(button[3]){
          input_controller.d = input_controller.S1;
        }
      }
  }
}
