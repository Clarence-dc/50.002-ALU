module add_sub16bit (
    input a[16],  
    input b[16],  
    input alufn[6],
    output s[16],
    output z, // z == true when all s = 0
    output v, // v == true when addition overflow (check 16th bit)
    output n  // N == true when s is negative (s16 is 1)
  ) {
  
  // instantiate 16 1-bit full adders 
  adder1b adder[16];
  

  always {
    // connect inputs into respective adders
    adder.x = a;
    adder.y = 16b0;
    adder.cin = 16b0;
    z = 0;
    v = 0;
    n = 0;
    // use alufn[1] to implement more operators
    case(alufn[1]){
      // connect b inputs into respective adders
      b0: // addition and sub
      adder.y = 16x{alufn[0]}^b;
      // connect cin and carry_out into adders
      adder.cin[15:1] = adder.cout[14:0];
      adder.cin[0] = alufn[0];
    
      // z = 0 if all adder sum outputs are 1
      z = ~|adder.s;   
    
      // if MSB of s is different from a and b (both are the same), v = 1
      v = (a[15] & (16x{alufn[0]}^b) & ~adder.s[15]) | (~a[15] & ~(16x{alufn[0]}^b) & adder.s[15]); 

      n = adder.s[15];
    
      s = adder.s;
      
      b1: // multiplier or modulo
      if(alufn[0] == 0){
        s = a * b;// multiplier
        }else{
        s = a/b; // modulo
      }
      z = 0;
      v = 0;
      n = 0;
      
    
    
    
    
}
}
